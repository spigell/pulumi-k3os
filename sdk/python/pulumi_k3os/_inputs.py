# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'CloudInitFilesArgs',
    'ConnectionArgs',
    'K3OSArgs',
    'NodeConfigurationArgs',
]

@pulumi.input_type
class CloudInitFilesArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 encoding: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 raw_file_permissions: Optional[pulumi.Input[str]] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if raw_file_permissions is not None:
            pulumi.set(__self__, "raw_file_permissions", raw_file_permissions)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoding", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="rawFilePermissions")
    def raw_file_permissions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "raw_file_permissions")

    @raw_file_permissions.setter
    def raw_file_permissions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "raw_file_permissions", value)


@pulumi.input_type
class ConnectionArgs:
    def __init__(__self__, *,
                 addr: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        if addr is not None:
            pulumi.set(__self__, "addr", addr)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def addr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addr")

    @addr.setter
    def addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class K3OSArgs:
    def __init__(__self__, *,
                 datasources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 k3s_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 modules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 server_url: Optional[pulumi.Input[str]] = None,
                 sysctls: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 token: Optional[pulumi.Input[str]] = None):
        if datasources is not None:
            pulumi.set(__self__, "datasources", datasources)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if k3s_args is not None:
            pulumi.set(__self__, "k3s_args", k3s_args)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if modules is not None:
            pulumi.set(__self__, "modules", modules)
        if ntp_servers is not None:
            pulumi.set(__self__, "ntp_servers", ntp_servers)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if server_url is not None:
            pulumi.set(__self__, "server_url", server_url)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def datasources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "datasources")

    @datasources.setter
    def datasources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "datasources", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="k3sArgs")
    def k3s_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "k3s_args")

    @k3s_args.setter
    def k3s_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "k3s_args", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def modules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "modules")

    @modules.setter
    def modules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "modules", value)

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ntp_servers")

    @ntp_servers.setter
    def ntp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ntp_servers", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_url")

    @server_url.setter
    def server_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_url", value)

    @property
    @pulumi.getter
    def sysctls(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "sysctls", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class NodeConfigurationArgs:
    def __init__(__self__, *,
                 boot_cmd: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 init_cmd: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 k3_os: Optional[pulumi.Input['K3OSArgs']] = None,
                 run_cmd: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssh_authorized_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 write_files: Optional[pulumi.Input[Sequence[pulumi.Input['CloudInitFilesArgs']]]] = None):
        if boot_cmd is not None:
            pulumi.set(__self__, "boot_cmd", boot_cmd)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if init_cmd is not None:
            pulumi.set(__self__, "init_cmd", init_cmd)
        if k3_os is not None:
            pulumi.set(__self__, "k3_os", k3_os)
        if run_cmd is not None:
            pulumi.set(__self__, "run_cmd", run_cmd)
        if ssh_authorized_keys is not None:
            pulumi.set(__self__, "ssh_authorized_keys", ssh_authorized_keys)
        if write_files is not None:
            pulumi.set(__self__, "write_files", write_files)

    @property
    @pulumi.getter(name="bootCmd")
    def boot_cmd(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "boot_cmd")

    @boot_cmd.setter
    def boot_cmd(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "boot_cmd", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="initCmd")
    def init_cmd(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "init_cmd")

    @init_cmd.setter
    def init_cmd(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "init_cmd", value)

    @property
    @pulumi.getter(name="k3OS")
    def k3_os(self) -> Optional[pulumi.Input['K3OSArgs']]:
        return pulumi.get(self, "k3_os")

    @k3_os.setter
    def k3_os(self, value: Optional[pulumi.Input['K3OSArgs']]):
        pulumi.set(self, "k3_os", value)

    @property
    @pulumi.getter(name="runCmd")
    def run_cmd(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "run_cmd")

    @run_cmd.setter
    def run_cmd(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "run_cmd", value)

    @property
    @pulumi.getter(name="sshAuthorizedKeys")
    def ssh_authorized_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ssh_authorized_keys")

    @ssh_authorized_keys.setter
    def ssh_authorized_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_authorized_keys", value)

    @property
    @pulumi.getter(name="writeFiles")
    def write_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudInitFilesArgs']]]]:
        return pulumi.get(self, "write_files")

    @write_files.setter
    def write_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudInitFilesArgs']]]]):
        pulumi.set(self, "write_files", value)


